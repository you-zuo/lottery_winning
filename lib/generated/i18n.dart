import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get ClickLogin => "点击登录";
  String get ClickToRegister => "Click to register";
  String get EnterMobilePhoneNumber => "Input phone";
  String get FollowUpPlan => "追号计划";
  String get InputMailbox => "Input email";
  String get InputQQ => "Input QQ";
  String get InterfacePurchase => "接口购买";
  String get MyOrder => "我的订单";
  String get NoNetWork => "No network";
  String get PartyLogin => "Please login to third party account";
  String get RepeatPassword => "重复密码：";
  String get ShareWithFriends => "分享给朋友";
  String get about => "关于我们";
  String get appName => "168";
  String get balance => "可用余额：";
  String get email => "email:";
  String get feedback => "意见反馈";
  String get homeTitle => "彩票大厅";
  String get login => "log on";
  String get msg => "消息";
  String get netWork => "Set NetWork";
  String get number => "请输入账号";
  String get passWord => "PassWord:";
  String get password => "请输入密码";
  String get phone => "phone：";
  String get qq => "QQ";
  String get register => "register";
  String get setting => "设置";
  String get userName => "UserName:";
}

class $en extends S {
  const $en();
}

class $zh_CN extends S {
  const $zh_CN();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get passWord => "密码：";
  @override
  String get msg => "消息";
  @override
  String get InterfacePurchase => "接口购买";
  @override
  String get ClickToRegister => "点击注册";
  @override
  String get about => "关于我们";
  @override
  String get login => "登录";
  @override
  String get FollowUpPlan => "追号计划";
  @override
  String get setting => "设置";
  @override
  String get feedback => "意见反馈";
  @override
  String get number => "请输入账号";
  @override
  String get password => "请输入密码";
  @override
  String get PartyLogin => "请第三方账号登录";
  @override
  String get ClickLogin => "点击登录";
  @override
  String get balance => "可用余额：";
  @override
  String get homeTitle => "彩票大厅";
  @override
  String get netWork => "点击设置网络状态";
  @override
  String get email => "邮箱";
  @override
  String get RepeatPassword => "重复密码：";
  @override
  String get ShareWithFriends => "分享给朋友";
  @override
  String get qq => "QQ";
  @override
  String get appName => "168开彩网";
  @override
  String get NoNetWork => "无网络";
  @override
  String get MyOrder => "我的订单";
  @override
  String get userName => "用户名：";
  @override
  String get phone => "手机号码：";
  @override
  String get InputMailbox => "请输入邮箱";
  @override
  String get InputQQ => "请输入QQ";
  @override
  String get EnterMobilePhoneNumber => "请输入手机号";
  @override
  String get register => "注册";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", ""),
      Locale("zh", "CN"),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "en":
          return SynchronousFuture<S>(const $en());
        case "zh_CN":
          return SynchronousFuture<S>(const $zh_CN());
        default:
          // NO-OP.
      }
    }
    return SynchronousFuture<S>(const S());
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
